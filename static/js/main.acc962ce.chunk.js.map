{"version":3,"sources":["components/Matters/Matters.module.css","components/Message/Message.module.css","components/FullName/FullName.module.css","components/FullName/FullName.tsx","components/Message/Message.tsx","components/Matters/Matters.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FullName","props","className","classes","name","message","Message","wrapper","img","src","alt","cloud","time","Matters","mattersInit","id","title","priority","useState","matters","setMatters","priorityClassToggler","matter","high","medium","low","inactive","list","map","key","onClick","removedMatters","filter","removeMatter","selector","filterMatters","filteredMatters","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.acc962ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Matters_list__33TB6\",\"high\":\"Matters_high__3m7Sx\",\"medium\":\"Matters_medium__1NUXA\",\"low\":\"Matters_low__2-OLU\",\"inactive\":\"Matters_inactive__1Eif_\",\"priority\":\"Matters_priority__3-hhx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Message_wrapper__naMzk\",\"messageAnim\":\"Message_messageAnim__257kB\",\"img\":\"Message_img__1I4jU\",\"cloud\":\"Message_cloud__1QDZa\",\"name\":\"Message_name__3KpyI\",\"message\":\"Message_message__1gdzP\",\"time\":\"Message_time__2DfaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"FullName_name__23wjj\",\"nameAnim\":\"FullName_nameAnim__3o11Y\"};","import React from 'react';\r\nimport classes from \"./FullName.module.css\"\r\n\r\ntype FullNameTypes = {\r\n  message: string\r\n}\r\n\r\nfunction FullName(props: FullNameTypes) {\r\n  return (\r\n    <div>\r\n      <p className={classes.name}>{props.message}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FullName","import React from 'react';\r\nimport classes from \"./Message.module.css\"\r\n\r\ntype MessageTypes = {\r\n    name: string,\r\n    message: string,\r\n    time: string\r\n}\r\n\r\nfunction Message(props: MessageTypes) {\r\n    return (\r\n      <div className={classes.wrapper}>\r\n          <div>\r\n              <img className={classes.img}\r\n                   src=\"https://pbs.twimg.com/profile_images/1085971393659981824/0eEoQ2Xd_400x400.jpg\"\r\n                   alt=\"avatar\"/>\r\n          </div>\r\n          <div className={classes.cloud}>\r\n              <p className={classes.name}>{props.name}</p>\r\n              <p className={classes.message}>{props.message}</p>\r\n              <p className={classes.time}>{props.time}</p>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React, {useState} from \"react\";\r\nimport classes from \"./Matters.module.css\";\r\n\r\ntype mattersType = {\r\n    id: number\r\n    title: string\r\n    priority: \"high\" | \"medium\" | \"low\"\r\n}\r\n\r\nfunction Matters() {\r\n    let mattersInit: Array<mattersType> = [\r\n        {id: 1, title: \"job\", priority: \"high\"},\r\n        {id: 2, title: \"gym\", priority: \"medium\"},\r\n        {id: 3, title: \"girlfriend\", priority: \"high\"},\r\n        {id: 4, title: \"university\", priority: \"low\"},\r\n        {id: 5, title: \"courses\", priority: \"high\"}\r\n    ];\r\n\r\n    let [matters, setMatters] = useState<Array<mattersType>>(mattersInit);\r\n\r\n    function priorityClassToggler(matter: mattersType) {\r\n        return matter.priority === \"high\" ? classes.high : //В зависимости от приоритета лишки выбирается класс\r\n          matter.priority === \"medium\" ? classes.medium :\r\n            matter.priority === \"low\" ? classes.low :\r\n              classes.inactive\r\n    }\r\n\r\n    let list = matters.map(function (matter) {\r\n            return (\r\n              <li className={classes.list} key={matter.id}>\r\n                  <div className={`${classes.priority} ${priorityClassToggler(matter)}`}>{matter.title} {matter.priority}</div>\r\n                  <button className={classes.low} onClick={ () => {removeMatter(matter.id)}}>X</button>\r\n              </li>\r\n            )\r\n        });\r\n\r\n    let selector = <li className={classes.list}>\r\n        <span>Sort by priority </span>\r\n        <button onClick={() => {filterMatters(\"all\")} } className={classes.inactive}>All</button>\r\n        <button onClick={() => {filterMatters(\"high\")} } className={classes.high}>High</button>\r\n        <button onClick={() => {filterMatters(\"medium\")} } className={classes.medium}>Medium</button>\r\n        <button onClick={() => {filterMatters(\"low\")} } className={classes.low}>Low</button>\r\n    </li>\r\n\r\n    function removeMatter(id: number) {\r\n        let removedMatters = matters.filter(matter => matter.id !== id);\r\n        setMatters(removedMatters)\r\n    }\r\n\r\n    function filterMatters(priority: \"high\" | \"medium\" | \"low\" | \"all\") {\r\n        let filteredMatters;\r\n        priority === \"all\" ? filteredMatters=mattersInit :\r\n          filteredMatters = mattersInit.filter(matter => matter.priority === priority); // фильтрованный стейт равен иницилазац. если значение алл\r\n        setMatters(filteredMatters)\r\n    }\r\n\r\n    return (\r\n      <ul>\r\n          {list}\r\n          {selector}\r\n      </ul>\r\n    )\r\n}\r\n\r\nexport default Matters;","import React from 'react';\nimport './App.css';\nimport FullName from \"./components/FullName/FullName\";\nimport Message from \"./components/Message/Message\";\nimport Matters from './components/Matters/Matters';\n\nfunction App() {\n    return (\n      <div className=\"App\">\n          <FullName message=\"Тышкевич Михаил Казимирович\"/>\n          <Message name=\"Kenshiro\" message=\"Omae Wa Mou Shindeiru\" time=\"04:20\"/>\n          <Matters/>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}